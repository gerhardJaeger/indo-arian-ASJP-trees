taxa <- readTaxonData("../data/indoiranian_taxa.tsv")


n_taxa <- taxa.size()

moves = VectorMoves()

speciation_rate ~ dnExponential(10000)
extinction_rate ~ dnExponential(10000)

moves.append( mvScale(speciation_rate, lambda=0.01, weight=1) )
moves.append( mvScale(speciation_rate, lambda=0.1,  weight=1) )
moves.append( mvScale(speciation_rate, lambda=1.0,  weight=1) )

moves.append( mvScale(extinction_rate, lambda=0.01, weight=1) )
moves.append( mvScale(extinction_rate, lambda=0.1,  weight=1) )
moves.append( mvScale(extinction_rate, lambda=1,    weight=1) )

rho ~ dnBeta(0.5, 20)
moves.append( mvScale(rho, lambda=0.01, weight=1) )
moves.append( mvScale(rho, lambda=0.1,  weight=1) )
moves.append( mvScale(rho, lambda=1,    weight=1) )


psi ~ dnExp(1000)

moves.append( mvScale(psi, lambda=0.01, weight=1) )
moves.append( mvScale(psi, lambda=0.1,  weight=1) )
moves.append( mvScale(psi, lambda=1,    weight=1) )

beforeSanskrit ~ dnExponential(0.001)


moves.append( mvScale(beforeSanskrit, lambda=0.01, weight=5.0) )
moves.append( mvScale(beforeSanskrit, lambda=0.1,  weight=5.0) )
moves.append( mvScale(beforeSanskrit, lambda=1,    weight=5.0) )

origin_time := 3400 + beforeSanskrit


fbd_dist = dnFBDP(origin=origin_time,
                  lambda=speciation_rate,
                  mu=extinction_rate,
                  psi=psi,
                  rho=rho,
                  taxa=taxa)


source("constraints.Rev")

fbd_tree ~ dnConstrainedTopology(fbd_dist, constraints=constraints)


moves.append( mvFNPR(fbd_tree, weight=15.0) )
moves.append( mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0) )

moves.append( mvNodeTimeSlideUniform(fbd_tree, weight=40.0) )
moves.append( mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0) )

fossils = fbd_tree.getFossils()
for (i in 1:fossils.size()) {
  t[i] := tmrca(fbd_tree, clade(fossils[i]))
  a_i = fossils[i].getMinAge()
  b_i = fossils[i].getMaxAge()
  F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
  F[i].clamp( 0 )
}

moves.append( mvFossilTimeSlideUniform(fbd_tree, origin_time, weight=5.0) )

num_samp_anc := fbd_tree.numSampledAncestors();

mymodel = model(fbd_tree)

monitors = VectorMonitors()

thinning = 10
monitors.append( mnModel(filename="output/indoiranian.log", printgen=thinning) )

monitors.append( mnFile(filename="output/indoiranian.trees", printgen=thinning, fbd_tree) )

monitors.append( mnScreen(printgen=thinning, num_samp_anc, rho, origin_time) )

mymcmc = mcmc(mymodel, monitors, moves)

mymcmc.run(generations=1000)




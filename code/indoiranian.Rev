taxa <- readTaxonData("../data/indoiranian_taxa.tsv")

cc = readDiscreteCharacterData("../data/indoiranian.cc.nex")
sc = readDiscreteCharacterData("../data/indoiranian.sc.nex")


source("constraints.Rev")


n_taxa <- taxa.size()

moves = VectorMoves()

speciation_rate ~ dnExponential(10000)
extinction_rate ~ dnExponential(10000)

moves.append( mvScale(speciation_rate, lambda=0.01, weight=1, tune=FALSE) )
moves.append( mvScale(speciation_rate, lambda=0.1,  weight=1, tune=FALSE) )
moves.append( mvScale(speciation_rate, lambda=1.0,  weight=1, tune=FALSE) )

moves.append( mvScale(extinction_rate, lambda=0.01, weight=1, tune=FALSE) )
moves.append( mvScale(extinction_rate, lambda=0.1,  weight=1, tune=FALSE) )
moves.append( mvScale(extinction_rate, lambda=1,    weight=1, tune=FALSE) )

rho ~ dnBeta(5, 5)
moves.append( mvScale(rho, lambda=0.01, weight=1, tune=FALSE) )
moves.append( mvScale(rho, lambda=0.1,  weight=1, tune=FALSE) )
moves.append( mvScale(rho, lambda=1,    weight=1, tune=FALSE) )


psi ~ dnHalfNormal(0, 100)

moves.append( mvScale(psi, lambda=0.01, weight=1, tune=FALSE) )
moves.append( mvScale(psi, lambda=0.1,  weight=1, tune=FALSE) )
moves.append( mvScale(psi, lambda=1,    weight=1, tune=FALSE) )

origin_time ~ dnUniform(3.6, 3.9)
moves.append( mvSlide(origin_time, delta=0.01, weight=1.0, tune=FALSE) )
moves.append( mvSlide(origin_time, delta=0.1,  weight=1.0, tune=FALSE) )
moves.append( mvSlide(origin_time, delta=1,    weight=1.0, tune=FALSE) )




fbd_dist = dnFBDP(origin=origin_time*1000,
                  lambda=speciation_rate,
                  mu=extinction_rate,
                  psi=psi,
                  rho=rho,
                  taxa=taxa)

tree ~ dnConstrainedTopology(fbd_dist, constraints=constraints)


moves.append( mvFNPR(tree, weight=10.0) )
moves.append( mvCollapseExpandFossilBranch(tree, origin_time, weight=10.0) )

moves.append( mvNodeTimeSlideUniform(tree, weight=10.0) )
moves.append( mvRootTimeSlideUniform(tree, origin_time, weight=10.0) )

# tip calibration

fossils = tree.getFossils()
for (i in 1:fossils.size()) {
  t[i] := tmrca(tree, clade(fossils[i]))
  a_i = fossils[i].getMinAge()
  b_i = fossils[i].getMaxAge()
  F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
  F[i].clamp( 0 )
}

moves.append( mvFossilTimeSlideUniform(tree, origin_time, weight=10.0) )

# node calibration

sans_stem :=  tmrca(tree, clade("sans1269"), TRUE) - tmrca(tree, clade("sans1269"))

obs_sans_stem ~ dnNormal(sans_stem, 1)
obs_sans_stem.clamp(0)


oldp_stem :=  tmrca(tree, clade("oldp1254"), TRUE) - tmrca(tree, clade("oldp1254"))

obs_oldp_stem ~ dnNormal(oldp_stem, 1)
obs_oldp_stem.clamp(0)


pahl_stem :=  tmrca(tree, clade("pahl1241"), TRUE) - tmrca(tree, clade("pahl1241"))

obs_pahl_stem ~ dnNormal(pahl_stem, 1)
obs_pahl_stem.clamp(0)


pir_stem :=  tmrca(tree, clade("pir"), TRUE) - tmrca(tree, clade("pir"))

obs_pir_stem ~ dnNormal(pir_stem, 1)
obs_pir_stem.clamp(0)

num_samp_anc := tree.numSampledAncestors();

# Relaxed clock

branch_rates_mean ~ dnLognormal(-10.0, 0.1)

moves.append( mvScale(branch_rates_mean, lambda=0.01, weight=1.0, tune=FALSE) )
moves.append( mvScale(branch_rates_mean, lambda=0.1,  weight=1.0, tune=FALSE) )
moves.append( mvScale(branch_rates_mean, lambda=1.0,  weight=1.0, tune=FALSE) )

n_branches <- 2 * n_taxa - 2

for (i in 1:n_branches) {
  branch_rates[i] ~ dnExp(1/branch_rates_mean)
  moves.append( mvScale(branch_rates[i], lambda=1.0,  weight=1.0, tune=FALSE) )
  moves.append( mvScale(branch_rates[i], lambda=0.1,  weight=1.0, tune=FALSE) )
  moves.append( mvScale(branch_rates[i], lambda=0.01, weight=1.0, tune=FALSE) )
}

moves.append( mvVectorScale(branch_rates, lambda=0.01, weight=1.0, tune=FALSE) )
moves.append( mvVectorScale(branch_rates, lambda=0.1,  weight=1.0, tune=FALSE) )
moves.append( mvVectorScale(branch_rates, lambda=1.0,  weight=1.0, tune=FALSE) )


## Model of character evolution

part_rate_mult ~ dnDirichlet(v(1, 1))
moves.append(mvBetaSimplex(part_rate_mult, alpha=0.1, tune=FALSE))
moves.append(mvBetaSimplex(part_rate_mult, alpha=1, tune=FALSE))
moves.append(mvBetaSimplex(part_rate_mult, alpha=10, tune=FALSE))
moves.append(mvDirichletSimplex(part_rate_mult, alpha=0.1, tune=FALSE))
moves.append(mvDirichletSimplex(part_rate_mult, alpha=1, tune=FALSE))
moves.append(mvDirichletSimplex(part_rate_mult, alpha=10, tune=FALSE))

part_rate := part_rate_mult * 2

for (i in 1:2) {
  for (j in 1:n_branches) {
    br[i][j] := part_rate[i]*branch_rates[j]
  }
}

coding = ["variable", "all"]

for (i in 1:2) {
  pi[i] ~ dnDirichlet(v(1,1))
  moves.append(mvBetaSimplex(pi[i], alpha=0.1, tune=FALSE))
  moves.append(mvBetaSimplex(pi[i], alpha=1, tune=FALSE))
  moves.append(mvBetaSimplex(pi[i], alpha=10, tune=FALSE))
  moves.append(mvDirichletSimplex(pi[i], alpha=0.1, tune=FALSE))
  moves.append(mvDirichletSimplex(pi[i], alpha=1, tune=FALSE))
  moves.append(mvDirichletSimplex(pi[i], alpha=10, tune=FALSE))
  Q[i]:= fnGTR(simplex(v(1)),pi[i])
  alpha_prior_mean[i] <- ln(5.0)
  alpha_prior_sd[i] <- 0.587405
  alpha[i] ~ dnLognormal(alpha_prior_mean[i], alpha_prior_sd[i])
  moves.append(mvScale(alpha[i], lambda=0.1, tune=FALSE))
  moves.append(mvScale(alpha[i], lambda=1, tune=FALSE))
  moves.append(mvScale(alpha[i], lambda=10, tune=FALSE))
  gamma_rates[i] := fnDiscretizeGamma(alpha[i], alpha[i], 4)
  seq[i] ~ dnPhyloCTMC(tree=tree, Q=Q[i],
                       rootFrequencies=pi[i],
                       branchRates=br[i],
                       siteRates=gamma_rates[i],
                       type="Standard",
                       coding=coding[i])
}


seq[1].clamp(cc)
seq[2].clamp(sc)



mymodel = model(seq)

monitors = VectorMonitors()

thinning = 100
monitors.append( mnModel(filename="output/indoiranian.log", printgen=thinning) )

monitors.append( mnFile(filename="output/indoiranian.trees", printgen=thinning, tree) )

monitors.append( mnScreen(printgen=thinning, rho, num_samp_anc, branch_rates_mean, origin_time) )

monitors.append(mnStochasticVariable(filename="output/indoiranian.var", printgen=thinning))

mymcmc = mcmc(mymodel, monitors, moves, nruns=4)

#mymcmc.burnin(1000, tuningInterval=100)
mymcmc.run(generations=10000)

mymcmc.operatorSummary()

treeTrace = readTreeTrace("output/indoiranian.trees")

mcc = mccTree(treeTrace, file = "output/indoiranian.mcc.tre")
q()

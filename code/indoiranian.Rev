seed(1234)

taxa <- readTaxonData("../data/indoiranian_taxa.tsv")

cc = readDiscreteCharacterData("../data/indoiranian.cc.nex")
sc = readDiscreteCharacterData("../data/indoiranian.sc.nex")

source("constraints.Rev")


n_taxa <- taxa.size()

moves = VectorMoves()

speciation_rate ~ dnLognormal(-7, 10)
speciation_rate.setValue(0.0003)
extinction_rate ~ dnLognormal(-7, 10)
extinction_rate.setValue(0.0005)

moves.append( mvScale(speciation_rate, lambda=0.1,  weight=1, tune=FALSE) )
moves.append( mvScale(speciation_rate, lambda=1,    weight=1, tune=FALSE) )
moves.append( mvScale(speciation_rate, lambda=10,    weight=1, tune=FALSE) )

moves.append( mvScale(extinction_rate, lambda=0.1,  weight=1, tune=FALSE) )
moves.append( mvScale(extinction_rate, lambda=1,    weight=1, tune=FALSE) )
moves.append( mvScale(extinction_rate, lambda=10,    weight=1, tune=FALSE) )


rho ~ dnBeta(1, 1)
moves.append( mvScale(rho, lambda=0.1,  weight=1, tune=FALSE) )
moves.append( mvScale(rho, lambda=1,    weight=1, tune=FALSE) )
moves.append( mvScale(rho, lambda=10,    weight=1, tune=FALSE) )


origin_time ~ dnUniform(3.6, 3.9)

moves.append( mvSlide(origin_time, delta=0.1,  weight=1.0, tune=FALSE) )
moves.append( mvSlide(origin_time, delta=1,    weight=1.0, tune=FALSE) )
moves.append( mvSlide(origin_time, delta=10,    weight=1.0, tune=FALSE) )




bd_dist = dnBDP(rootAge=origin_time*1000,
                lambda=speciation_rate,
                mu=extinction_rate,
                rho=rho,
                taxa=taxa)

tree ~ dnConstrainedTopology(bd_dist, constraints=constraints)

moves.append( mvFNPR(tree, weight=10.0) )
moves.append( mvCollapseExpandFossilBranch(tree, origin_time, weight=10.0) )

moves.append( mvNodeTimeSlideUniform(tree, weight=10.0) )
moves.append( mvRootTimeSlideUniform(tree, origin_time, weight=10.0) )

moves.append( mvNNI(tree, weight=10.0))
moves.append( mvNarrow(tree, weight=10.0))



# tip calibration

fossils = tree.getFossils()
for (i in 1:fossils.size()) {
  t[i] := tmrca(tree, clade(fossils[i]))
  a_i = fossils[i].getMinAge()
  b_i = fossils[i].getMaxAge()
  F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
  F[i].clamp( 0 )
}

moves.append( mvFossilTimeSlideUniform(tree, origin_time, weight=10.0) )

# node calibration

sans_stem :=  tmrca(tree, clade("sans1269"), TRUE) - tmrca(tree, clade("sans1269"))

obs_sans_stem ~ dnNormal(sans_stem, 1)
obs_sans_stem.clamp(0)


oldp_stem :=  tmrca(tree, clade("oldp1254"), TRUE) - tmrca(tree, clade("oldp1254"))

obs_oldp_stem ~ dnNormal(oldp_stem, 1)
obs_oldp_stem.clamp(0)


pahl_stem :=  tmrca(tree, clade("pahl1241"), TRUE) - tmrca(tree, clade("pahl1241"))

obs_pahl_stem ~ dnNormal(pahl_stem, 1)
obs_pahl_stem.clamp(0)


pir = [taxon("aves1237"),
       taxon("wakh1245"),
       taxon("khot1251"),
       taxon("osse1243"),
       taxon("sari1246"),
       taxon("shug1248"),
       taxon("ishk1246"),
       taxon("ormu1247"),
       taxon("para1299"),
       taxon("pash1269"),
       taxon("bact1239"),
       taxon("part1239"),
       taxon("pahl1241"),
       taxon("midd1350"),
       taxon("dari1249"),
       taxon("oldp1254"),
       taxon("kumz1235"),
       taxon("jude1256"),
       taxon("luri1257"),
       taxon("bakh1245"),
       taxon("taly1247"),
       taxon("khwa1238"),
       taxon("sogd1245"),
       taxon("yagn1238"),
       taxon("west2368"),
       taxon("maza1291"),
       taxon("cent1972"),
       taxon("diml1238"),
       taxon("esht1238"),
       taxon("gila1241"),
       taxon("sang1315")]


pir_age := tmrca(tree, tree.getClade(pir))
obs_pir_age ~ dnUnif(pir_age - 3500, pir_age - 3300)
obs_pir_age.clamp(0)


## # Relaxed clock

n_branches <- 2 * n_taxa - 2

for (i in 1:2) {
  branch_rates_mean[i] ~ dnLognormal(-10.0, 10)
  
  moves.append( mvScale(branch_rates_mean[i], lambda=0.1,  weight=1.0, tune=FALSE) )
  moves.append( mvScale(branch_rates_mean[i], lambda=1.0,  weight=1.0, tune=FALSE) )
  moves.append( mvScale(branch_rates_mean[i], lambda=10,  weight=1.0, tune=FALSE) )

  for (j in 1:n_branches) {
    branch_rates[i][j] ~ dnExp(1/branch_rates_mean[i])
    moves.append( mvScale(branch_rates[i][j], lambda=0.1,  weight=1.0, tune=FALSE) )
    moves.append( mvScale(branch_rates[i][j], lambda=1.0,  weight=1.0, tune=FALSE) )
    moves.append( mvScale(branch_rates[i][j], lambda=10,  weight=1.0, tune=FALSE) )
  }
  moves.append( mvVectorScale(branch_rates[i], lambda=0.1,  weight=1.0, tune=FALSE) )
  moves.append( mvVectorScale(branch_rates[i], lambda=1.0,  weight=1.0, tune=FALSE) )
  moves.append( mvVectorScale(branch_rates[i], lambda=10,  weight=1.0, tune=FALSE) )
}

## Model of character evolution

## part_rate_mult ~ dnDirichlet(v(2, 4))
## moves.append(mvBetaSimplex(part_rate_mult, alpha=0.1, tune=FALSE))
## moves.append(mvBetaSimplex(part_rate_mult, alpha=1, tune=FALSE))
## moves.append(mvBetaSimplex(part_rate_mult, alpha=10, tune=FALSE))
## moves.append(mvDirichletSimplex(part_rate_mult, alpha=0.1, tune=FALSE))
## moves.append(mvDirichletSimplex(part_rate_mult, alpha=1, tune=FALSE))
## moves.append(mvDirichletSimplex(part_rate_mult, alpha=10, tune=FALSE))

## part_rate := part_rate_mult * 2

## for (i in 1:2) {
##   for (j in 1:n_branches) {
##     br[i][j] := part_rate[i]*branch_rates[i][j]
##   }
## }

coding = ["variable", "all"]

for (i in 1:2) {
  pi[i] ~ dnDirichlet(v(1,1))
  moves.append(mvBetaSimplex(pi[i], alpha=0.1, tune=FALSE))
  moves.append(mvBetaSimplex(pi[i], alpha=1, tune=FALSE))
  moves.append(mvBetaSimplex(pi[i], alpha=10, tune=FALSE))
  moves.append(mvDirichletSimplex(pi[i], alpha=0.1, tune=FALSE))
  moves.append(mvDirichletSimplex(pi[i], alpha=1, tune=FALSE))
  moves.append(mvDirichletSimplex(pi[i], alpha=10, tune=FALSE))
  Q[i]:= fnGTR(simplex(v(1)),pi[i])
  alpha_prior_mean[i] <- ln(5.0)
  alpha_prior_sd[i] <- 0.587405
  alpha[i] ~ dnLognormal(alpha_prior_mean[i], alpha_prior_sd[i])
  moves.append(mvScale(alpha[i], lambda=0.1, tune=FALSE))
  moves.append(mvScale(alpha[i], lambda=1, tune=FALSE))
  moves.append(mvScale(alpha[i], lambda=10, tune=FALSE))
  gamma_rates[i] := fnDiscretizeGamma(alpha[i], alpha[i], 4)
  seq[i] ~ dnPhyloCTMC(tree=tree, Q=Q[i],
                       rootFrequencies=pi[i],
                       branchRates=branch_rates[i],
                       siteRates=gamma_rates[i],
                       type="Standard",
                       coding=coding[i])
}

pi1 := pi[1]
pi2 := pi[2]
branch_rates1 := branch_rates[1]
branch_rates2 := branch_rates[2]

seq[1].clamp(cc)
seq[2].clamp(sc)


nNodes = 2*n_taxa-1
for (i in 1:nNodes) {
  nodeAge[i] := tree.nodeAge(i)
}


mymodel = model(seq)

monitors = VectorMonitors()

thinning = 10
monitors.append( mnModel(filename="output/indoiranian.log", printgen=thinning) )

monitors.append( mnFile(filename="output/indoiranian.trees", printgen=thinning, tree) )

monitors.append( mnScreen(printgen=thinning))

monitors.append(mnStochasticVariable(filename="output/indoiranian.var", printgen=thinning))

mymcmc = mcmcmc(mymodel, monitors, moves, nruns=2, nchains=2)

mymcmc.run(generations=1000)

mymcmc.operatorSummary()

q()

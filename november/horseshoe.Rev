seed(12345)
modelName = "horseshoe"

d = readDiscreteCharacterData("states.nex")
states = d.getStateDescriptions()
trees = treeTrace(readTrees("IIr.tree", treetype="clock"), burnin=0)

mni = 0
mvi = 0

tree ~ dnEmpiricalTree(trees)
moves[++mvi] = mvEmpiricalTree(tree, weight=1, metropolisHastings=FALSE)


## 1: (+clf,obl.pl)
## 2: (+clf,opt.pl)
## 3: (-clf,obl.pl)
## 4: (-clf,opt.pl)
## 5: (-clf,morph.pl)

## direct transitions:
## 1 -> 2
## 1 -> 3
## 2 -> 1
## 2 -> 4
## 3 -> 1
## 3 -> 4
## 3 -> 5
## 4 -> 2
## 4 -> 3
## 4 -> 5
## 5 -> 3
## 5 -> 4

for (i in 1:20) {
  tau[i] ~ dnHalfCauchy(0, 1)
  moves[++mvi] = mvScale(tau[i])
  lambda[i] ~ dnHalfCauchy(0, 1)
  moves[++mvi] = mvScale(lambda[i])
  r[i] ~ dnNormal(0, lambda[i]*tau[i])
  moves[++mvi] = mvSlide(r[i])
  q[i] := abs(r[i])/1000
}



Q := fnFreeK(q, rescaled=FALSE)

counter = 0
for (i in 1:5) {
  for (j in 1:5) {
    if (i != j) {
      rates[++counter] := Q[i][j]*1000
    }
  }
}




seq ~ dnPhyloCTMC(tree=tree, Q=Q, type="Standard")
seq.clamp(d)

mymodel = model(seq)

thinning = 50

monitors[++mni] = mnFile(filename="output/"+modelName+".p",
                         printgen=thinning, rates)

monitors[++mni] = mnFile(filename="output/"+modelName+".t",
                         printgen=thinning, tree)

monitors[++mni] = mnScreen(printgen=thinning)

mymcmc = mcmc(mymodel, monitors, moves, nruns=4)

mymcmc.burnin(generations=5000, tuningInterval=100)

mymcmc.run(generations=50000)


## stepping stone sampling

pow_p = powerPosterior(mymodel, moves, monitors, "output/"+modelName+".out",
                       cats=50)

pow_p.burnin(generations=1000, tuningInterval=100)

pow_p.run(generations=20000)

ss = steppingStoneSampler(file="output/"+modelName+".out", powerColumnName="power",
                          likelihoodColumnName="likelihood")

ss.marginal()

write(ss.marginal()+"\n",filename="output/"+modelName+"_marginal.txt")


q()


